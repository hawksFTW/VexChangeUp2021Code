// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// ---- END VEXCODE CONFIGURED DEVICES ----
// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// Distance17           distance      17              
// ---- END VEXCODE CONFIGURED DEVICES ----
//By: Dhruv Darbha
//Last Changed: 3/15/2021
//Desc: main.cpp to run autonomous and driver control

#include "vex.h"
#include "robot-config.h"
#include <iostream>
#include <cmath>

using namespace vex;
using namespace std;
competition Competition;

double WHEEL_RADIUS = 1.625; 
//double THETA_START = 0;

//Reseting Encoders before use
void pre_auton(void) {
// Initializing Robot Configuration.
vexcodeInit();
// inertialSensor.resetHeading();
leftEncoder.resetRotation();
rightEncoder.resetRotation();
strafeEncoder.resetRotation();
// All activities that occur before the competition starts
// Example: clearing encoders, setting servo positions, ...
}

//Variable defenitions/Odom Constants to be used in the loop 
                                           
//Arc length for the robot's movement
double L = 0;
double R = 0;
double S = 0;

//Error and kP used for calculating speed
//double kP = 2;
double error = 0;

//Diameter of each odom wheel
double dL = 3.25;
double dR = 3.25;
double dS = 3.25;

double pi = 3.14159626;

//Circumference of each odom wheel
double cL = pi * dL;
double cR = pi * dR;
double cS = pi * dS;

//Length from the odom wheel to the center
double wL = 5;
double wR = 5;
double wS = 5;

//Angle and total length
double W = wL + wR + wS;
double theta = 0;

//L, R, S previous position
double LPrevPos = 0;
double RPrevPos = 0;
double SPrevPos = 0;

//L, R, S position
double LPos = 0;
double RPos = 0;
double SPos = 0;

//L, R, S delta distance
double totalDeltaDistL = 0;
double totalDeltaDistR = 0;
double previousTheta = 0;

//Delta x and y
double deltaXLocal = 0;
double deltaYLocal = 0;

//X and Y position
double xPosGlobal = 0;
double yPosGlobal = 0;

double currentAbsoluteOrientation = 0;

///////////////////////////////////////////////Odom loop to update encoder values every 10 ms///////////////////////////////////////

int odomUpdate()
{
    while(1)
    {
      //Getting encoder position
      int LPos = leftEncoder.position(rotationUnits::deg); //position(rotationUnits::deg)
      int RPos = rightEncoder.position(rotationUnits::deg); //position(rotationUnits::deg)
      int SPos = strafeEncoder.position(rotationUnits::deg); //position(rotationUnits::deg)

      // cout<<LPos<<endl;
      // cout<<RPos<<endl;
      // cout<<SPos<<endl;

      double deltaDistL = ((LPos - LPrevPos) * pi / 180) * WHEEL_RADIUS;
      double deltaDistR = ((RPos - RPrevPos) * pi / 180) * WHEEL_RADIUS;
      double deltaDistS = ((SPos - SPrevPos) * pi / 180) * WHEEL_RADIUS;

      // cout<<deltaDistL<<endl;
      // cout<<deltaDistR<<endl;
      // cout<<deltaDistS<<endl;

      //Previous = Current position
      LPrevPos = LPos;
      RPrevPos = RPos;
      SPrevPos = SPos;

      totalDeltaDistL += deltaDistL;
      totalDeltaDistR += deltaDistR;
      
      //Calculating orientation of the robot
      currentAbsoluteOrientation = theta - ((totalDeltaDistL - totalDeltaDistR) / (wL + wR));

      //cout<<currentAbsoluteOrientation<<endl;

      double deltaTheta = currentAbsoluteOrientation - previousTheta;

      previousTheta = currentAbsoluteOrientation;

      if(deltaTheta == 0)
      {
        deltaXLocal = deltaDistS;
        deltaYLocal = deltaDistL;
      }
      else 
      {
        deltaXLocal = 2 * sin(deltaTheta / 2.0) * ((deltaDistS / deltaTheta) + wS);
        deltaYLocal = 2 * sin(deltaTheta / 2.0) * ((deltaDistR / deltaTheta) - wR);

        cout<<deltaXLocal<<endl;
        cout<<deltaYLocal<<endl;
      }

      double avgThetaForArc = currentAbsoluteOrientation - (deltaTheta / 2);
      
      //Delta X and Y position global calculated
      double deltaXGlobal = (deltaYLocal * cos(avgThetaForArc)) - (deltaXLocal * sin(avgThetaForArc));
      double deltaYGlobal = (deltaYLocal * sin(avgThetaForArc)) + (deltaXLocal * cos(avgThetaForArc));
      
      // cout<<deltaYGlobal<<endl;
      // cout<<deltaYGlobal<<endl;
      
      //X and Y pos calculated
      if(abs(deltaXGlobal) < 144 and abs(deltaYGlobal) < 144)
      {
        xPosGlobal += deltaXGlobal;
        yPosGlobal += deltaYGlobal;

      }

      // cout<<xPosGlobal<<endl;
      // cout<<yPosGlobal<<endl;

      task::sleep(10);
    }
    return 0;
}

void forwardOdomt(double x2, double y2, double kP, int t = 4000)
{
  error = 5;
  int timeout = 0;
  while(timeout < t && fabs(error) > 3)
  {
    //Error x and y calculated from x and y position
    double error_x = x2 - xPosGlobal;
    //double error_y = y2 - yPosGlobal;

    //Speed of the robot movement calculated
    double speed = error_x * kP;
    //cout<<speed<<endl;
    leftFront.spin(directionType::fwd,  speed, percentUnits::pct);
    rightFront.spin(directionType::fwd, speed, percentUnits::pct);
    leftBack.spin(directionType::fwd, speed, percentUnits::pct);
    rightBack.spin(directionType::fwd, speed, percentUnits::pct);

    task::sleep(2);
    timeout += 5;
  }

  //speed = 0;
  leftFront.stop();
  rightFront.stop();
  leftBack.stop();
  rightBack.stop();
  //cout<<"Done"<<endl;
}


void slideOdom(double x2a, double y2a, double kP1)
{
  while(true)
  {
    //Error x and y calculated from x and y position
    double error_x = x2a - xPosGlobal;
    double error_y = y2a - yPosGlobal;
    cout<<error_y<<endl;
    //cout<<error_y<<endl;
    // cout<<xPosGlobal<<endl;
    //cout<<yPosGlobal<<endl;
    double error = sqrt((error_x*error_x) + (error_y*error_y));

    //Speed of the robot movement calculated
    double speed = error_y * kP1;
    //cout<<speed<<endl;

    leftFront.spin(directionType::fwd, speed, percentUnits::pct);
    rightFront.spin(directionType::rev, speed, percentUnits::pct);
    leftBack.spin(directionType::rev, speed, percentUnits::pct);
    rightBack.spin(directionType::fwd, speed, percentUnits::pct);

    //If statement to move until error reaches a small value
    if(error < 1) //2
    {
      speed = 0;
      leftFront.stop();
      rightFront.stop();
      leftBack.stop();
      rightBack.stop();

      break;
    }
    task::sleep(5);
  }
}

void turnOdom(double dangle, double kPt, int t = 1000)
{
  double turnError = 5;
  int timeout = 0;
  while(timeout < t && turnError > 1)
  {
    double turnError = currentAbsoluteOrientation - dangle;
    cout<<"Dangle: "<<dangle<<endl;
    cout<<"TurnError: "<<turnError<<endl;
    cout<<"CurrentAbdPos: "<<currentAbsoluteOrientation<<endl;

    double speed = turnError * kPt;

    leftFront.spin(directionType::fwd, speed, percentUnits::pct);
    rightFront.spin(directionType::rev, speed, percentUnits::pct);
    leftBack.spin(directionType::fwd, speed, percentUnits::pct);
    rightBack.spin(directionType::rev, speed, percentUnits::pct);

    //If statement to move until error reaches a small value

    task::sleep(1);
    timeout += 1;
  }

  leftFront.stop();
  rightFront.stop();
  leftBack.stop();
  rightBack.stop();
  
  cout<<"Done"<<endl;
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous(void) 
{
  forwardOdom(10, 0, 2); // 10 inches forward at a speed multiplier of 2
  turnOdom(90, 2) //turn 90 degrees at a speed multiplier of 2
  wait(60, sec);

}


void usercontrol(void) {
  
  while(1)
  {

    //Arcade Drive Code:
    // rightFront.spin(forward, (-Controller1.Axis2.value() + Controller1.Axis1.value()) * 0.5 + (Controller1.Axis4.value()) * 0.25, percent);
    // leftBack.spin(forward, (-Controller1.Axis2.value() + Controller1.Axis1.value()) * 0.5 - (Controller1.Axis4.value()) * 0.25, percent);
    // leftFront.spin(forward, (-Controller1.Axis2.value() - Controller1.Axis1.value()) * 0.5 - (Controller1.Axis4.value()) * 0.25, percent);
    // rightBack.spin(forward, (-Controller1.Axis2.value() - Controller1.Axis1.value()) * 0.5 + (Controller1.Axis4.value()) * 0.25, percent);

	//Tank Drive Code
    int forward = Controller1.Axis3.position(vex::percent);
    int sideways = Controller1.Axis4.position(vex::percent);
    int turn1 = Controller1.Axis1.position(vex::percent);

    rightFront.spin(vex::forward, forward - sideways + turn1, vex::percent);
    leftFront.spin(vex::forward,  forward + sideways - turn1, vex::percent);
    rightBack.spin(vex::forward,  forward + sideways + turn1, vex::percent);
    leftBack.spin(vex::forward,   forward - sideways - turn1, vex::percent);



    if(Controller1.ButtonR1.pressing())
    {
      intakeLeft.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);
      intakeRight.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
    }
    else if(Controller1.ButtonR2.pressing())
    {
      intakeLeft.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
      intakeRight.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);
    }
    else
    {
      intakeLeft.stop();
      intakeRight.stop();
    }

    if(Controller1.ButtonL1.pressing())
    {
      outtakeUp.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
      //outtakeUp2.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);    
    }
    else if(Controller1.ButtonL2.pressing())
    {
      outtakeUp.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);
      //outtakeUp2.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);    
    }
    else
    {
      outtakeUp.stop();
    }
  
  }

} 

task* odomTask = new task(odomUpdate);

int main() 
{
  odomTask->resume();
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);
}
